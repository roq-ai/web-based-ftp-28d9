generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model folder {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(255)
  ftp_user_id   String   @db.Uuid
  path          String?  @db.VarChar(255)
  size          Int?
  last_modified DateTime @default(now()) @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  ftp_user      ftp_user @relation(fields: [ftp_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ftp_server {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  ip_address      String       @db.VarChar(255)
  port            Int
  organization_id String       @db.Uuid
  username        String?      @db.VarChar(255)
  password        String?      @db.VarChar(255)
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ftp_user        ftp_user[]
}

model ftp_user {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username      String     @db.VarChar(255)
  password      String     @db.VarChar(255)
  rights        String     @db.VarChar(255)
  ftp_server_id String     @db.Uuid
  folder_path   String?    @db.VarChar(255)
  active        Boolean    @default(true)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  folder        folder[]
  ftp_server    ftp_server @relation(fields: [ftp_server_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  guest         guest[]
}

model guest {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name  String   @db.VarChar(255)
  last_name   String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  ftp_user_id String   @db.Uuid
  phone       String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  ftp_user    ftp_user @relation(fields: [ftp_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  address     String?      @db.VarChar(255)
  phone       String?      @db.VarChar(255)
  website     String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  ftp_server  ftp_server[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
